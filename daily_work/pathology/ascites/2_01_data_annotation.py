"""
======================================================
@File   : 01_basic_analysis
@Author : ouyangkang
@Date   : 2025.03.06
@Email  : ouyangkang@genomics.cn
@Desc   : a script for data filtering, data annotation, data visulization and clinic associated info infering
@mirror : ascites_analysis_pipeline
@Version: v1
@Update : 2025.03.06
======================================================

update record：
- 2025.03.24 add multi-model predicition result for voting
"""

import scanpy as sc
import pandas as pd
import celltypist
from celltypist import models
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scvi
import torch
from scvi.external import CellAssign
import subprocess
import sys


def basic_precess(h5ad_file):
    """
    basic precessing single-cell matrix

    paramaters:
    - h5ad_file (str): the file pathway of single-cell matrix

    return:
    - adata (h5ad): the filtered single-cell matrix with h5ad format
    - bf_cell_num (int): the cell numbers before filter
    - bf_gene_num (int): the gene median numbers before filter
    - bf_umi_num (int): the umi average numbers before filter
    - af_cell_num (int): the cell numbers after filter
    - af_gene_num (int): the gene median numbers after filter
    - af_umi_num (int): the umi average number after filter
    """
    adata = sc.read_h5ad(h5ad_file)
    
    adata.var['mt'] = adata.var_names.str.startswith('MT-')
    adata.var['rb'] = adata.var_names.str.contains('^RP[SL]')
    adata.var['hb'] = adata.var_names.str.contains('^HB[APS]')
    adata.var['hsp'] = adata.var_names.str.contains('^HSP')
    sc.pp.calculate_qc_metrics(adata, qc_vars=['mt','rb','hb','hsp'], percent_top=None, log1p=False, inplace=True)
    
    # before filtering
    bf_cell_num = adata.X.shape[0]
    bf_gene_num = adata.obs['n_genes_by_counts'].median()
    bf_umi_num = int(adata.obs['total_counts'].mean())
    
    # filtering
    sc.pp.filter_cells(adata, min_genes=200)
    sc.pp.filter_genes(adata, min_cells=3)
    adata = adata[adata.obs.total_counts > 500, :]
    adata = adata[adata.obs.total_counts < 22000, :]
    adata = adata[adata.obs.pct_counts_mt < 15, :]
    adata = adata[adata.obs.pct_counts_hb < 5, :]
    
    # after filtering
    af_cell_num = adata.X.shape[0]
    af_gene_num = adata.obs['n_genes_by_counts'].median()
    af_umi_num = int(adata.obs['total_counts'].mean())
    
    # save raw matrix
    adata.layers["counts"] = adata.X.copy()
    
    # save raw matrix as csv
    i_df = adata.to_df()
    i_df = i_df.T
    i_df.index.name = 'SYMBOL'
    i_df.to_csv('./input.csv')
    
    sc.pp.normalize_total(adata, target_sum=1e4)
    adata.layers['normalized_counts'] = adata.X.copy()
    sc.pp.log1p(adata)
    
    return adata, bf_cell_num, bf_gene_num, bf_umi_num, af_cell_num, af_gene_num, af_umi_num


def celltypist_0(adata, model='/data/work/ascites/code/cellTypist_model/Immune_All_High.pkl'):
    """
    utilizing celltypist for data annotation

    paramaters:
    - adata (h5ad): single-cell matrix after filter

    return:
    - adata (h5ad): single-cell matrix with annotation information generated by celltypist, saving in adata.obs['P_celltypist']
    """
    # CellTypist requires a logarithmised and normalised expression matrix stored in the AnnData
    predictions = celltypist.annotate(adata, model=model, majority_voting=True)
    adata.obs['P_celltypist'] = predictions.predicted_labels['majority_voting']
    print(f'the prediction result of celltypist model includes {predictions.predicted_labels.majority_voting.unique()}')
    print('prediction based on celltypist ended')
    
    return adata


def cellassign_1(adata, marker_df=None):
    """
    utilizing cellassign for data annotation

    paramaters:
    - adata (h5ad): single-cell matrix after celltypist annotation
    - marker_df (str): the path of marker genes table
    
    return:
    - adata (h5ad): single-cell matrix with annotation information generated by cellassign, saving in adata.obs['P_cellassign']
    """
    scvi.settings.seed = 0
    
    if marker_df:
        marker_genes = pd.read_csv(marker_df)
        marker_genes.set_index('Gene', inplace=True)
        marker_list = adata.var_names
        marker_genes = marker_genes[marker_genes.index.isin(marker_list)]
        
        # copy adata for prediction
        bdata = adata.copy()
        bdata.X = bdata.layers['normalized_counts']
        # calculate size factor
        lib_size = np.asarray(bdata.X.sum(axis=1))
        bdata.obs['size_factor'] = lib_size / np.median(lib_size)
        # subset marker genes
        bdata = bdata[:, marker_genes.index].copy()
        
        scvi.external.CellAssign.setup_anndata(bdata, size_factor_key='size_factor')
        model = CellAssign(bdata, marker_genes)
        model.train(lr=1e-3, max_epochs=1200)
        predictions = model.predict()
        adata.obs['P_cellassign'] = predictions.idxmax(axis=1).values
        
    else:
        print('the marker gene used for annotating T, B, Monocytes, Macrophages, Neutrophils and Epithelial cells are following table')
        print('B cells \t["CD74", "CD79A", "CD79B", "JCHAIN"]')
        print('T cells \t["CD3D", "CD2", "CD3E", "CD3G"]')
        print('Monocytes \t["CD14", "LYZ", "CSF1R"]')
        print('Macrophages \t["CD68", "CD163", "MRC1"]')
        print('Neutrophils \t["S100A8", "MPO", "FCGR3B"]')
        print('Epithelial cells \t["KRT5", "SFN", "KRT14", "EPCAM"]')
        print('Fibroblasts \t["CCL14", "VWF", "PECAM1", "ENG"]')
        print('Endothelial cells \t["DCN", "COL1A1", "COL1A2", "FN1"]')
        print('If you want to change the marker genes, please provide csv file like following table')
        
        marker_genes = pd.DataFrame({
            "Gene": ['CD74', 'CD79A', 'CD79B', "JCHAIN", "CD3D", "CD2", "CD3E", "CD3G", "CD14", "LYZ", "CSF1R", "CD68", "CD163", "MRC1", "S100A8", "MPO", "FCGR3B", "KRT5", "SFN", "KRT14", "EPCAM", "CCL14", "VWF", "PECAM1", "ENG", "DCN", "COL1A1", "COL1A2", "FN1"],
            "B cells": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "T cells": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "Monocytes": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "Macrophages": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "Neutrophils": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "Epithelial cells": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            "Fibroblasts": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
            "Endothelial cells": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
        })
        
        print(marker_genes.iloc[0:5, 0:5])
        
        # check for the presence of marker genes
        marker_genes.set_index('Gene', inplace=True)
        marker_list = adata.var_names
        marker_genes = marker_genes[marker_genes.index.isin(marker_list)]
        
        # copy adata for prediction
        bdata = adata.copy()
        bdata.X = bdata.layers['normalized_counts']
        # calculate size factor
        lib_size = np.asarray(bdata.X.sum(axis=1))
        bdata.obs['size_factor'] = lib_size / np.median(lib_size)
        # subset marker genes
        bdata = bdata[:, marker_genes.index].copy()
        
        scvi.external.CellAssign.setup_anndata(bdata, size_factor_key='size_factor')
        model = CellAssign(bdata, marker_genes)
        model.train(lr=1e-3, max_epochs=1200)
        predictions = model.predict()
        adata.obs['P_cellassign'] = predictions.idxmax(axis=1).values
        
        print('prediction based on cellassign ended')
        
        return adata
        

def cancer_finder(adata):
    """
    predicting malignant cell based on cancer-finder

    paramaters:
    - adata (h5ad): single-cell matrix
    
    return:
    - adata (h5ad): single-cell matrix after prediction with result saved in adata.obs["P_cancer-finder"]
    """
    input_file = './input.csv'
    
    bash_result = subprocess.run(["bash", './cancer_finder.sh', input_file], text=True, capture_output=True)
    if bash_result.returncode == 0:
        print('prediction based on cancer-finder ended')
    else:
        print('cancer-finder meet errors')
        
    result_info = pd.read_csv('./output.csv')
    result_info.set_index('sample', inplace=True)
    result_info = result_info.loc[adata.obs_names, :]
    
    adata.obs['P_cancer-finder'] = ["Malignant cell" if i == 1 else 'Normal cell' for i in result_info['predict']]
    
    return adata
        
        
def cell_ratio_plot(adata):
    """
    plotting cell ratio pie figure

    paramaters:
    - adata (h5ad): single-cell matrix after celltypist annotation
    
    return:
    - None, but the function will generate a figure
        - cell_ratio.png: exhibit the cell ratio
    """
    cell_type_counts = adata.obs['P_celltypist'].value_counts()
    
    len_celltype = len(adata.obs['P_celltypist'].unique())
    explode = np.zeros(len_celltype)
    position = cell_type_counts.index == "Epithelial cells"
    explode[position] = 0.2
    
    cell_text = []
    for i in cell_type_counts / cell_type_counts.sum():
        cell_text.append([f"{i*100:.2f}%"])
    
    plt.figure(figsize=(12, 8))

    def custom_autopct(pct):
        return ('%1.2f%%' % pct) if pct > 5 else ''

    wedges, texts, autotexts = plt.pie(
        cell_type_counts, 
        labels=None,  
        autopct=custom_autopct, 
        startangle=140,
        explode=explode,
        colors=plt.cm.tab20.colors[:len(cell_type_counts)],  
        wedgeprops={'edgecolor': 'black'}  # 添加边框提高可读性
    )
    # plot table
    the_table = plt.table(
        cellText=cell_text,
        rowLabels=cell_type_counts.index,
        rowColours=plt.cm.tab20.colors[:len(cell_type_counts)],
        colLabels=['Cell Ratio'],
        loc='center right',
        cellLoc='center',  # 让单元格文本居中
        rowLoc='center',   # 让行标签居中
        bbox=[1.15, 0.3, 0.2, 0.4]
    )
    
    
    num_mal = adata.obs['P_cancer-finder'].value_counts()['Malignant cell']
    num_epi = adata.obs['P_celltypist'].value_counts()['Epithelial cells']
    mal_ratio = num_mal / num_epi
    
    ax = plt.gca()  # 获取当前轴
    plt.text(0.5, 0.08, f'the malgnant cell ratio is {mal_ratio*100:.2f}% ({num_mal}) within Epithelial cells', ha='center', va='top', transform=ax.transAxes)

    plt.setp(the_table, fontsize=12)  # 调整表格字体大小
    plt.setp(autotexts, fontsize=12, color='black', fontweight='bold')  # 调整饼图上的文本大小

    plt.title('Cell Type Proportions', fontsize=14, fontweight='bold')
    # 调整布局，确保图例和表格不会重叠
    plt.subplots_adjust(left=0.1, right=0.75)
    plt.tight_layout()  
    plt.savefig('./cell_ratio.png', bbox_inches='tight', dpi=80)

    
def cnv_plot(adata, gtf_file):
    """
    plotting inferCNV result figure

    paramaters:
    - adata (h5ad): single-cell matrix
    - gef_file (str): gtf file pathway (gene annotation file)
    
    return:
    - None, but the function will generate a figure
        - cnv_result.png: exhibit the infercnv result
    """
    # filter low information genes
    sc.pp.filter_genes(adata, min_cells=10)
    
    cnv.io.genomic_position_from_gtf(gtf_file= gtf_file,
                                 adata = adata,
                                 gtf_gene_id='gene_name'
                                )
    
    cell_type_list = adata.obs['P_celltypist'].unique()
    non_imu_type = ['Endothelial cells', 'Epithelial cells', 'Fibroblasts']
    imu_list = list(set(cell_type_list) - set(non_imu_type))
    
    # We provide all immune cell types as "normal cells".
    cnv.tl.infercnv(
        adata,
        reference_key="P_celltypist",
        reference_cat=imu_list,
        window_size=250,
    )
    
    cnv.pl.chromosome_heatmap(adata, groupby="P_celltypist", show = False)
    plt.savefig('./cnv_result.png')
    

if __name__ == "__main__":
    # input parameters
    h5ad_file = sys.argv[1]
    celltypist_model = sys.argv[2]
    gtf_file = sys.argv[3]
    
    adata, bf_cell_num, bf_gene_num, bf_umi_num, af_cell_num, af_gene_num, af_umi_num = basic_precess(h5ad_file)
    print(f'type \t number of cell \t median number of gene \t mean number of UMI')
    print(f'before filtration \t {bf_cell_num} \t {bf_gene_num} \t {bf_umi_num}')
    print(f'after filtration \t {af_cell_num} \t {af_gene_num} \t {af_umi_num}')
    
    
    # prediction
    adata = celltypist_0(adata, celltypist_model)
    adata = cellassign_1(adata)
    adata = cancer_finder(adata)
    cell_ratio_plot(adata)
    
    if 'spatial' in adata.obsm:
        if adata.obs['P_cancer-finder'].value_counts()['Malignant cell'] != 0:
            sc.pl.spatial(adata, color='P_cancer-finder', spot_size=150, groups='Malignant cell', show=False)
            plt.savefig('./distribution.png')
        else:
            print('Malignant cell is not identified by Cancer-finder model')
    else:
        print('the data is without spatial information in adata.obsm')
        
    cnv_plot(adata, gtf_file)